        -:    0:Source:/home/dihydromonoxide/vcpkg/installed/x64-linux/include/png++/writer.hpp
        -:    0:Graph:/home/dihydromonoxide/CLionProjects/Raytracer/cmake-build-debug-coverage/CMakeFiles/Raytracer.dir/src/World.cpp.gcno
        -:    0:Data:/home/dihydromonoxide/CLionProjects/Raytracer/cmake-build-debug-coverage/CMakeFiles/Raytracer.dir/src/World.cpp.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2: * Copyright (C) 2007,2008   Alex Shulgin
        -:    3: *
        -:    4: * This file is part of png++ the C++ wrapper for libpng.  PNG++ is free
        -:    5: * software; the exact copying conditions are as follows:
        -:    6: *
        -:    7: * Redistribution and use in source and binary forms, with or without
        -:    8: * modification, are permitted provided that the following conditions are met:
        -:    9: *
        -:   10: * 1. Redistributions of source code must retain the above copyright notice,
        -:   11: * this list of conditions and the following disclaimer.
        -:   12: *
        -:   13: * 2. Redistributions in binary form must reproduce the above copyright
        -:   14: * notice, this list of conditions and the following disclaimer in the
        -:   15: * documentation and/or other materials provided with the distribution.
        -:   16: *
        -:   17: * 3. The name of the author may not be used to endorse or promote products
        -:   18: * derived from this software without specific prior written permission.
        -:   19: *
        -:   20: * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
        -:   21: * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
        -:   22: * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
        -:   23: * NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   24: * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
        -:   25: * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
        -:   26: * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
        -:   27: * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
        -:   28: * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
        -:   29: * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   30: */
        -:   31:#ifndef PNGPP_WRITER_HPP_INCLUDED
        -:   32:#define PNGPP_WRITER_HPP_INCLUDED
        -:   33:
        -:   34:#include <cassert>
        -:   35:#include "io_base.hpp"
        -:   36:
        -:   37:namespace png
        -:   38:{
        -:   39:
        -:   40:    /**
        -:   41:     * \brief PNG writer class template.  This is the low-level
        -:   42:     * writing interface--use image class or generator class to
        -:   43:     * actually write images.
        -:   44:     *
        -:   45:     * The \c ostream template parameter specifies the type of output
        -:   46:     * stream to work with.  The \c ostream class should implement the
        -:   47:     * minimum of the following interface:
        -:   48:     *
        -:   49:     * \code
        -:   50:     * class my_ostream
        -:   51:     * {
        -:   52:     * public:
        -:   53:     *     void write(char const*, size_t);
        -:   54:     *     void flush();
        -:   55:     *     bool good();
        -:   56:     * };
        -:   57:     * \endcode
        -:   58:     *
        -:   59:     * With the semantics similar to the \c std::ostream.  Naturally,
        -:   60:     * \c std::ostream fits this requirement and can be used with the
        -:   61:     * writer class as is.
        -:   62:     *
        -:   63:     * \see image, reader, generator, io_base
        -:   64:     */
        -:   65:    template< class ostream >
        -:   66:    class writer
        -:   67:        : public io_base
        -:   68:    {
        -:   69:    public:
        -:   70:        /**
        -:   71:         * \brief Constructs a writer prepared to write PNG image into
        -:   72:         * a \a stream.
        -:   73:         */
function _ZN3png6writerISt14basic_ofstreamIcSt11char_traitsIcEEEC2ERS4_ called 1 returned 100% blocks executed 83%
        1:   74:        explicit writer(ostream& stream)
        -:   75:            : io_base(png_create_write_struct(PNG_LIBPNG_VER_STRING,
        -:   76:                                              static_cast< io_base* >(this),
        -:   77:                                              raise_error,
        1:   78:                                              0))
        1:   78-block  0
call    0 returned 1
call    1 returned 1
    $$$$$:   78-block  1
call    2 never executed
        -:   79:        {
        1:   80:            png_set_write_fn(m_png, & stream, write_data, flush_data);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   81:        }
        1:   81-block  0
        -:   82:
function _ZN3png6writerISt14basic_ofstreamIcSt11char_traitsIcEEED2Ev called 1 returned 100% blocks executed 100%
        1:   83:        ~writer()
        -:   84:        {
        1:   85:            m_end_info.destroy();
        1:   85-block  0
call    0 returned 1
        1:   86:            png_destroy_write_struct(& m_png, m_info.get_png_info_ptr());
call    0 returned 1
call    1 returned 1
        1:   87:        }
call    0 returned 1
        -:   88:
        -:   89:        void write_png() const
        -:   90:        {
        -:   91:            if (setjmp(png_jmpbuf(m_png)))
        -:   92:            {
        -:   93:                throw error(m_error);
        -:   94:            }
        -:   95:            png_write_png(m_png,
        -:   96:                          m_info.get_png_info(),
        -:   97:                          /* transforms = */ 0,
        -:   98:                          /* params = */ 0);
        -:   99:        }
        -:  100:
        -:  101:        /**
        -:  102:         * \brief Write info about PNG image.
        -:  103:         */
function _ZNK3png6writerISt14basic_ofstreamIcSt11char_traitsIcEEE10write_infoEv called 1 returned 100% blocks executed 58%
        1:  104:        void write_info() const
        -:  105:        {
        1:  106:            if (setjmp(png_jmpbuf(m_png)))
        1:  106-block  0
call    0 returned 1
        1:  106-block  1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
        -:  107:            {
    #####:  108:                throw error(m_error);
    %%%%%:  108-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  108-block  1
call    4 never executed
    $$$$$:  108-block  2
call    5 never executed
        -:  109:            }
        1:  110:            m_info.write();
        1:  110-block  0
call    0 returned 1
        1:  111:        }
        -:  112:
        -:  113:        /**
        -:  114:         * \brief Writes a row of image data at a time.
        -:  115:         */
function _ZN3png6writerISt14basic_ofstreamIcSt11char_traitsIcEEE9write_rowEPh called 512 returned 100% blocks executed 58%
      512:  116:        void write_row(byte* bytes)
        -:  117:        {
      512:  118:            if (setjmp(png_jmpbuf(m_png)))
      512:  118-block  0
call    0 returned 512
      512:  118-block  1
call    1 returned 512
branch  2 taken 0 (fallthrough)
branch  3 taken 512
        -:  119:            {
    #####:  120:                throw error(m_error);
    %%%%%:  120-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  120-block  1
call    4 never executed
    $$$$$:  120-block  2
call    5 never executed
        -:  121:            }
      512:  122:            png_write_row(m_png, bytes);
      512:  122-block  0
call    0 returned 512
      512:  123:        }
        -:  124:
        -:  125:        /**
        -:  126:         * \brief Reads ending info about PNG image.
        -:  127:         */
function _ZNK3png6writerISt14basic_ofstreamIcSt11char_traitsIcEEE14write_end_infoEv called 1 returned 100% blocks executed 58%
        1:  128:        void write_end_info() const
        -:  129:        {
        1:  130:            if (setjmp(png_jmpbuf(m_png)))
        1:  130-block  0
call    0 returned 1
        1:  130-block  1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
        -:  131:            {
    #####:  132:                throw error(m_error);
    %%%%%:  132-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  132-block  1
call    4 never executed
    $$$$$:  132-block  2
call    5 never executed
        -:  133:            }
        1:  134:            m_end_info.write();
        1:  134-block  0
call    0 returned 1
        1:  135:        }
        -:  136:
        -:  137:    private:
function _ZN3png6writerISt14basic_ofstreamIcSt11char_traitsIcEEE10write_dataEP14png_struct_defPhm called 30 returned 100% blocks executed 50%
       30:  138:        static void write_data(png_struct* png, byte* data, png_size_t length)
        -:  139:        {
       30:  140:            io_base* io = static_cast< io_base* >(png_get_error_ptr(png));
       30:  140-block  0
call    0 returned 30
       30:  141:            writer* wr = static_cast< writer* >(io);
       30:  142:            wr->reset_error();
call    0 returned 30
       30:  143:            ostream* stream = reinterpret_cast< ostream* >(png_get_io_ptr(png));
call    0 returned 30
        -:  144:            try
        -:  145:            {
       30:  146:                stream->write(reinterpret_cast< char* >(data), length);
call    0 returned 30
branch  1 taken 30 (fallthrough)
branch  2 taken 0 (throw)
       30:  147:                if (!stream->good())
       30:  147-block  0
call    0 returned 30
branch  1 taken 30 (fallthrough)
branch  2 taken 0 (throw)
       30:  147-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 30
        -:  148:                {
    #####:  149:                    wr->set_error("ostream::write() failed");
    %%%%%:  149-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  150:                }
        -:  151:            }
    =====:  152:            catch (std::exception const& error)
    $$$$$:  152-block  0
call    0 never executed
    $$$$$:  152-block  1
call    1 never executed
    $$$$$:  152-block  2
call    2 never executed
        -:  153:            {
    =====:  154:                wr->set_error(error.what());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  155:            }
    =====:  156:            catch (...)
    $$$$$:  156-block  0
call    0 never executed
        -:  157:            {
    =====:  158:                assert(!"caught something wrong");
call    0 never executed
        -:  159:                wr->set_error("write_data: caught something wrong");
        -:  160:            }
       30:  161:            if (wr->is_error())
       30:  161-block  0
call    0 returned 30
branch  1 taken 0 (fallthrough)
branch  2 taken 30
        -:  162:            {
    #####:  163:                wr->raise_error();
    %%%%%:  163-block  0
call    0 never executed
        -:  164:            }
       30:  165:        }
       30:  165-block  0
        -:  166:
function _ZN3png6writerISt14basic_ofstreamIcSt11char_traitsIcEEE10flush_dataEP14png_struct_def called 0 returned 0% blocks executed 0%
    #####:  167:        static void flush_data(png_struct* png)
        -:  168:        {
    #####:  169:            io_base* io = static_cast< io_base* >(png_get_error_ptr(png));
    %%%%%:  169-block  0
call    0 never executed
    #####:  170:            writer* wr = static_cast< writer* >(io);
    #####:  171:            wr->reset_error();
call    0 never executed
    #####:  172:            ostream* stream = reinterpret_cast< ostream* >(png_get_io_ptr(png));
call    0 never executed
        -:  173:            try
        -:  174:            {
    #####:  175:                stream->flush();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  176:                if (!stream->good())
    %%%%%:  176-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  176-block  1
branch  3 never executed
branch  4 never executed
        -:  177:                {
    #####:  178:                    wr->set_error("ostream::flush() failed");
    %%%%%:  178-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  179:                }
        -:  180:            }
    =====:  181:            catch (std::exception const& error)
    $$$$$:  181-block  0
call    0 never executed
    $$$$$:  181-block  1
call    1 never executed
    $$$$$:  181-block  2
call    2 never executed
        -:  182:            {
    =====:  183:                wr->set_error(error.what());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  184:            }
    =====:  185:            catch (...)
    $$$$$:  185-block  0
call    0 never executed
        -:  186:            {
    =====:  187:                assert(!"caught something wrong");
call    0 never executed
        -:  188:                wr->set_error("flush_data: caught something wrong");
        -:  189:            }
    #####:  190:            if (wr->is_error())
    %%%%%:  190-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  191:            {
    #####:  192:                wr->raise_error();
    %%%%%:  192-block  0
call    0 never executed
        -:  193:            }
    #####:  194:        }
    %%%%%:  194-block  0
        -:  195:    };
        -:  196:
        -:  197:} // namespace png
        -:  198:
        -:  199:#endif // PNGPP_WRITER_HPP_INCLUDED
