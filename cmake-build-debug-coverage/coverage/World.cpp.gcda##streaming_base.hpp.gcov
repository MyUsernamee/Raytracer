        -:    0:Source:/home/dihydromonoxide/vcpkg/installed/x64-linux/include/png++/streaming_base.hpp
        -:    0:Graph:/home/dihydromonoxide/CLionProjects/Raytracer/cmake-build-debug-coverage/CMakeFiles/Raytracer.dir/src/World.cpp.gcno
        -:    0:Data:/home/dihydromonoxide/CLionProjects/Raytracer/cmake-build-debug-coverage/CMakeFiles/Raytracer.dir/src/World.cpp.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2: * Copyright (C) 2007,2008   Alex Shulgin
        -:    3: *
        -:    4: * This file is part of png++ the C++ wrapper for libpng.  PNG++ is free
        -:    5: * software; the exact copying conditions are as follows:
        -:    6: *
        -:    7: * Redistribution and use in source and binary forms, with or without
        -:    8: * modification, are permitted provided that the following conditions are met:
        -:    9: *
        -:   10: * 1. Redistributions of source code must retain the above copyright notice,
        -:   11: * this list of conditions and the following disclaimer.
        -:   12: *
        -:   13: * 2. Redistributions in binary form must reproduce the above copyright
        -:   14: * notice, this list of conditions and the following disclaimer in the
        -:   15: * documentation and/or other materials provided with the distribution.
        -:   16: *
        -:   17: * 3. The name of the author may not be used to endorse or promote products
        -:   18: * derived from this software without specific prior written permission.
        -:   19: *
        -:   20: * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
        -:   21: * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
        -:   22: * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
        -:   23: * NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   24: * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
        -:   25: * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
        -:   26: * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
        -:   27: * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
        -:   28: * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
        -:   29: * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   30: */
        -:   31:#ifndef PNGPP_STREAMING_BASE_HPP_INCLUDED
        -:   32:#define PNGPP_STREAMING_BASE_HPP_INCLUDED
        -:   33:
        -:   34:#include <cassert>
        -:   35:#include "image_info.hpp"
        -:   36:#include "pixel_traits.hpp"
        -:   37:
        -:   38:namespace png
        -:   39:{
        -:   40:
        -:   41:    /**
        -:   42:     * \brief The default image_info holder class.  Stores image_info
        -:   43:     * member object.
        -:   44:     */
        -:   45:    class def_image_info_holder
        -:   46:    {
        -:   47:    public:
        -:   48:        def_image_info_holder(image_info const& info)
        -:   49:            : m_info(info)
        -:   50:        {
        -:   51:        }
        -:   52:
        -:   53:        image_info& get_info()
        -:   54:        {
        -:   55:            return m_info;
        -:   56:        }
        -:   57:
        -:   58:    private:
        -:   59:        image_info m_info;
        -:   60:    };
        -:   61:
        -:   62:    /**
        -:   63:     * \brief An image_info holder class.  Stores a reference to the
        -:   64:     * image_info object.  The image_info object itself should be
        -:   65:     * stored elsewhere.
        -:   66:     */
        -:   67:    class image_info_ref_holder
        -:   68:    {
        -:   69:    public:
function _ZN3png21image_info_ref_holderC2ERNS_10image_infoE called 1 returned 100% blocks executed 100%
        1:   70:        image_info_ref_holder(image_info& info)
        1:   71:            : m_info(info)
        -:   72:        {
        1:   73:        }
        -:   74:
function _ZN3png21image_info_ref_holder8get_infoEv called 515 returned 100% blocks executed 100%
      515:   75:        image_info& get_info()
        -:   76:        {
      515:   77:            return m_info;
      515:   77-block  0
        -:   78:        }
        -:   79:
        -:   80:    private:
        -:   81:        image_info& m_info;
        -:   82:    };
        -:   83:
        -:   84:    /**
        -:   85:     * \brief A base class template for consumer and generator
        -:   86:     * classes.  Provides default \c reset() method implementation as
        -:   87:     * well as \c info_holder policy.
        -:   88:     */
        -:   89:    template< typename pixel, class info_holder >
        -:   90:    class streaming_base
        -:   91:    {
        -:   92:    public:
        -:   93:        typedef pixel_traits< pixel > traits;
        -:   94:
function _ZN3png14streaming_baseINS_15basic_rgb_pixelIhEENS_21image_info_ref_holderEEC2ERNS_10image_infoE called 1 returned 100% blocks executed 100%
        1:   95:        explicit streaming_base(image_info& info)
        1:   96:            : m_info_holder(info)
        1:   96-block  0
call    0 returned 1
        -:   97:        {
        1:   98:        }
        -:   99:
        -:  100:        streaming_base(uint_32 width, uint_32 height)
        -:  101:            : m_info_holder(make_image_info< pixel >())
        -:  102:        {
        -:  103:            get_info().set_width(width);
        -:  104:            get_info().set_height(height);
        -:  105:        }
        -:  106:
        -:  107:        image_info const& get_info() const
        -:  108:        {
        -:  109:            return m_info_holder.get_info();
        -:  110:        }
        -:  111:
        -:  112:    protected:
function _ZN3png14streaming_baseINS_15basic_rgb_pixelIhEENS_21image_info_ref_holderEE5resetEm called 1 returned 100% blocks executed 100%
        1:  113:        void reset(size_t /*pass*/)
        -:  114:        {
        -:  115:            // nothing to do in the most general case
        1:  116:        }
        -:  117:
function _ZN3png14streaming_baseINS_15basic_rgb_pixelIhEENS_21image_info_ref_holderEE8get_infoEv called 515 returned 100% blocks executed 100%
      515:  118:        image_info& get_info()
        -:  119:        {
      515:  120:            return m_info_holder.get_info();
      515:  120-block  0
call    0 returned 515
        -:  121:        }
        -:  122:
        -:  123:        info_holder m_info_holder;
        -:  124:    };
        -:  125:
        -:  126:} // namespace png
        -:  127:
        -:  128:#endif // PNGPP_STREAMING_BASE_HPP_INCLUDED
