        -:    0:Source:/home/dihydromonoxide/vcpkg/installed/x64-linux/include/png++/image.hpp
        -:    0:Graph:/home/dihydromonoxide/CLionProjects/Raytracer/cmake-build-debug-coverage/CMakeFiles/Raytracer.dir/src/World.cpp.gcno
        -:    0:Data:/home/dihydromonoxide/CLionProjects/Raytracer/cmake-build-debug-coverage/CMakeFiles/Raytracer.dir/src/World.cpp.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2: * Copyright (C) 2007,2008   Alex Shulgin
        -:    3: *
        -:    4: * This file is part of png++ the C++ wrapper for libpng.  PNG++ is free
        -:    5: * software; the exact copying conditions are as follows:
        -:    6: *
        -:    7: * Redistribution and use in source and binary forms, with or without
        -:    8: * modification, are permitted provided that the following conditions are met:
        -:    9: *
        -:   10: * 1. Redistributions of source code must retain the above copyright notice,
        -:   11: * this list of conditions and the following disclaimer.
        -:   12: *
        -:   13: * 2. Redistributions in binary form must reproduce the above copyright
        -:   14: * notice, this list of conditions and the following disclaimer in the
        -:   15: * documentation and/or other materials provided with the distribution.
        -:   16: *
        -:   17: * 3. The name of the author may not be used to endorse or promote products
        -:   18: * derived from this software without specific prior written permission.
        -:   19: *
        -:   20: * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
        -:   21: * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
        -:   22: * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
        -:   23: * NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   24: * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
        -:   25: * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
        -:   26: * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
        -:   27: * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
        -:   28: * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
        -:   29: * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   30: */
        -:   31:#ifndef PNGPP_IMAGE_HPP_INCLUDED
        -:   32:#define PNGPP_IMAGE_HPP_INCLUDED
        -:   33:
        -:   34:#include <fstream>
        -:   35:#include "pixel_buffer.hpp"
        -:   36:#include "generator.hpp"
        -:   37:#include "consumer.hpp"
        -:   38:#include "convert_color_space.hpp"
        -:   39:
        -:   40:namespace png
        -:   41:{
        -:   42:
        -:   43:    /**
        -:   44:     * \brief Class template to represent PNG image.
        -:   45:     *
        -:   46:     * The image consists of pixel data as well as additional %image
        -:   47:     * %info like interlace type, compression method, palette (for
        -:   48:     * colormap-based images) etc.  Provides methods to read and write
        -:   49:     * images from/to a generic stream and to manipulate %image pixels.
        -:   50:     * 
        -:   51:     * The default pixel_buffer stores pixels in a vector of vectors, which
        -:   52:     * is good for openning, editing or converting an image to any
        -:   53:     * pixel type.
        -:   54:     * But for simple and fast image unpacking to one memory chunk this approch
        -:   55:     * is unacceptable, because it leads to multiple memory allocations, the
        -:   56:     * unpacked image is spread across the memory and client code needs to
        -:   57:     * gather it manualy. solid_pixel_buffer solves this problem, but with
        -:   58:     * restriction: pixels with fractional number of bytes per channel are
        -:   59:     * not allowed (see solid_pixel_buffer.hpp for details).
        -:   60:     */
        -:   61:    template< typename pixel, typename pixel_buffer_type = pixel_buffer< pixel > >
        -:   62:    class image
        -:   63:    {
        -:   64:    public:
        -:   65:        /**
        -:   66:         * \brief The pixel traits type for \c pixel.
        -:   67:         */
        -:   68:        typedef pixel_traits< pixel > traits;
        -:   69:
        -:   70:        /**
        -:   71:         * \brief The pixel buffer type for \c pixel.
        -:   72:         */
        -:   73:        typedef pixel_buffer_type pixbuf;
        -:   74:
        -:   75:        /**
        -:   76:         * \brief Represents a row of image pixel data.
        -:   77:         */
        -:   78:        typedef typename pixbuf::row_type row_type;
        -:   79:        typedef typename pixbuf::row_access row_access;
        -:   80:        typedef typename pixbuf::row_const_access row_const_access;
        -:   81:
        -:   82:        /**
        -:   83:         * \brief A transformation functor to convert any image to
        -:   84:         * appropriate color space.
        -:   85:         */
        -:   86:        typedef convert_color_space< pixel > transform_convert;
        -:   87:
        -:   88:        /**
        -:   89:         * \brief The default io transformation: does nothing.
        -:   90:         */
        -:   91:        struct transform_identity
        -:   92:        {
        -:   93:            void operator()(io_base&) const {}
        -:   94:        };
        -:   95:
        -:   96:        /**
        -:   97:         * \brief Constructs an empty image.
        -:   98:         */
        -:   99:        image()
        -:  100:            : m_info(make_image_info< pixel >())
        -:  101:        {
        -:  102:        }
        -:  103:
        -:  104:        /**
        -:  105:         * \brief Constructs an empty image of specified width and height.
        -:  106:         */
function _ZN3png5imageINS_15basic_rgb_pixelIhEENS_12pixel_bufferIS2_EEEC2Ejj called 1 returned 100% blocks executed 62%
        1:  107:        image(uint_32 width, uint_32 height)
        1:  108:            : m_info(make_image_info< pixel >())
        1:  108-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:  108-block  1
call    4 never executed
    $$$$$:  108-block  2
call    5 never executed
        -:  109:        {
        1:  110:            resize(width, height);
        1:  110-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  111:        }
        1:  111-block  0
        -:  112:
        -:  113:        /**
        -:  114:         * \brief Constructs an image reading data from specified file
        -:  115:         * using default converting transform.
        -:  116:         */
        -:  117:        explicit image(std::string const& filename)
        -:  118:        {
        -:  119:            read(filename, transform_convert());
        -:  120:        }
        -:  121:
        -:  122:        /**
        -:  123:         * \brief Constructs an image reading data from specified file
        -:  124:         * using custom transformaton.
        -:  125:         */
        -:  126:        template< class transformation >
        -:  127:        image(std::string const& filename,
        -:  128:              transformation const& transform)
        -:  129:        {
        -:  130:            read(filename.c_str(), transform);
        -:  131:        }
        -:  132:
        -:  133:        /**
        -:  134:         * \brief Constructs an image reading data from specified file
        -:  135:         * using default converting transform.
        -:  136:         */
        -:  137:        explicit image(char const* filename)
        -:  138:        {
        -:  139:            read(filename, transform_convert());
        -:  140:        }
        -:  141:
        -:  142:        /**
        -:  143:         * \brief Constructs an image reading data from specified file
        -:  144:         * using custom transformaton.
        -:  145:         */
        -:  146:        template< class transformation >
        -:  147:        image(char const* filename, transformation const& transform)
        -:  148:        {
        -:  149:            read(filename, transform);
        -:  150:        }
        -:  151:
        -:  152:        /**
        -:  153:         * \brief Constructs an image reading data from a stream using
        -:  154:         * default converting transform.
        -:  155:         */
        -:  156:        explicit image(std::istream& stream)
        -:  157:        {
        -:  158:            read_stream(stream, transform_convert());
        -:  159:        }
        -:  160:
        -:  161:        /**
        -:  162:         * \brief Constructs an image reading data from a stream using
        -:  163:         * custom transformation.
        -:  164:         */
        -:  165:        template< class transformation >
        -:  166:        image(std::istream& stream, transformation const& transform)
        -:  167:        {
        -:  168:            read_stream(stream, transform);
        -:  169:        }
        -:  170:
        -:  171:        /**
        -:  172:         * \brief Reads an image from specified file using default
        -:  173:         * converting transform.
        -:  174:         */
        -:  175:        void read(std::string const& filename)
        -:  176:        {
        -:  177:            read(filename, transform_convert());
        -:  178:        }
        -:  179:
        -:  180:        /**
        -:  181:         * \brief Reads an image from specified file using custom
        -:  182:         * transformaton.
        -:  183:         */
        -:  184:        template< class transformation >
        -:  185:        void read(std::string const& filename, transformation const& transform)
        -:  186:        {
        -:  187:            read(filename.c_str(), transform);
        -:  188:        }
        -:  189:
        -:  190:        /**
        -:  191:         * \brief Reads an image from specified file using default
        -:  192:         * converting transform.
        -:  193:         */
        -:  194:        void read(char const* filename)
        -:  195:        {
        -:  196:            read(filename, transform_convert());
        -:  197:        }
        -:  198:
        -:  199:        /**
        -:  200:         * \brief Reads an image from specified file using custom
        -:  201:         * transformaton.
        -:  202:         */
        -:  203:        template< class transformation >
        -:  204:        void read(char const* filename, transformation const& transform)
        -:  205:        {
        -:  206:            std::ifstream stream(filename, std::ios::binary);
        -:  207:            if (!stream.is_open())
        -:  208:            {
        -:  209:                throw std_error(filename);
        -:  210:            }
        -:  211:            stream.exceptions(std::ios::badbit);
        -:  212:            read_stream(stream, transform);
        -:  213:        }
        -:  214:
        -:  215:        /**
        -:  216:         * \brief Reads an image from a stream using default
        -:  217:         * converting transform.
        -:  218:         */
        -:  219:        void read(std::istream& stream)
        -:  220:        {
        -:  221:            read_stream(stream, transform_convert());
        -:  222:        }
        -:  223:
        -:  224:        /**
        -:  225:         * \brief Reads an image from a stream using custom
        -:  226:         * transformation.
        -:  227:         */
        -:  228:        template< class transformation >
        -:  229:        void read(std::istream& stream, transformation const& transform)
        -:  230:        {
        -:  231:            read_stream(stream, transform);
        -:  232:        }
        -:  233:
        -:  234:        /**
        -:  235:         * \brief Reads an image from a stream using default
        -:  236:         * converting transform.
        -:  237:         */
        -:  238:        template< class istream >
        -:  239:        void read_stream(istream& stream)
        -:  240:        {
        -:  241:            read_stream(stream, transform_convert());
        -:  242:        }
        -:  243:
        -:  244:        /**
        -:  245:         * \brief Reads an image from a stream using custom
        -:  246:         * transformation.
        -:  247:         */
        -:  248:        template< class istream, class transformation >
        -:  249:        void read_stream(istream& stream, transformation const& transform)
        -:  250:        {
        -:  251:            pixel_consumer pixcon(m_info, m_pixbuf);
        -:  252:            pixcon.read(stream, transform);
        -:  253:        }
        -:  254:
        -:  255:        /**
        -:  256:         * \brief Writes an image to specified file.
        -:  257:         */
function _ZN3png5imageINS_15basic_rgb_pixelIhEENS_12pixel_bufferIS2_EEE5writeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 100%
        1:  258:        void write(std::string const& filename)
        -:  259:        {
        1:  260:            write(filename.c_str());
        1:  260-block  0
call    0 returned 1
call    1 returned 1
        1:  261:        }
        -:  262:
        -:  263:        /**
        -:  264:         * \brief Writes an image to specified file.
        -:  265:         */
function _ZN3png5imageINS_15basic_rgb_pixelIhEENS_12pixel_bufferIS2_EEE5writeEPKc called 1 returned 100% blocks executed 32%
        1:  266:        void write(char const* filename)
        -:  267:        {
        2:  268:            std::ofstream stream(filename, std::ios::binary);
        1:  268-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  268-block  1
call    3 returned 1
    $$$$$:  268-block  2
call    4 never executed
        1:  269:            if (!stream.is_open())
        1:  269-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  269-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
        -:  270:            {
    #####:  271:                throw std_error(filename);
    %%%%%:  271-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  271-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  271-block  2
call    8 never executed
call    9 never executed
call   10 never executed
    $$$$$:  271-block  3
call   11 never executed
    $$$$$:  271-block  4
    $$$$$:  271-block  5
call   12 never executed
    $$$$$:  271-block  6
    $$$$$:  271-block  7
call   13 never executed
        -:  272:            }
        1:  273:            stream.exceptions(std::ios::badbit);
        1:  273-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  274:            write_stream(stream);
        1:  274-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  275:        }
        -:  276:
        -:  277:        /**
        -:  278:         * \brief Writes an image to a stream.
        -:  279:         */
        -:  280:        template< class ostream >
function _ZN3png5imageINS_15basic_rgb_pixelIhEENS_12pixel_bufferIS2_EEE12write_streamISt14basic_ofstreamIcSt11char_traitsIcEEEEvRT_ called 1 returned 100% blocks executed 100%
        1:  281:        void write_stream(ostream& stream)
        -:  282:        {
        1:  283:            pixel_generator pixgen(m_info, m_pixbuf);
        1:  283-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  284:            pixgen.write(stream);
        1:  284-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  285:        }
        1:  285-block  0
        -:  286:
        -:  287:        /**
        -:  288:         * \brief Returns a reference to image pixel buffer.
        -:  289:         */
        -:  290:        pixbuf& get_pixbuf()
        -:  291:        {
        -:  292:            return m_pixbuf;
        -:  293:        }
        -:  294:        
        -:  295:        /**
        -:  296:         * \brief Returns a const reference to image pixel buffer.
        -:  297:         */
        -:  298:        pixbuf const& get_pixbuf() const
        -:  299:        {
        -:  300:            return m_pixbuf;
        -:  301:        }
        -:  302:
        -:  303:        /**
        -:  304:         * \brief Replaces the image pixel buffer.
        -:  305:         *
        -:  306:         * \param buffer  a pixel buffer object to take a copy from
        -:  307:         */
        -:  308:        void set_pixbuf(pixbuf const& buffer)
        -:  309:        {
        -:  310:            m_pixbuf = buffer;
        -:  311:        }
        -:  312:
        -:  313:        uint_32 get_width() const
        -:  314:        {
        -:  315:            return m_pixbuf.get_width();
        -:  316:        }
        -:  317:
        -:  318:        uint_32 get_height() const
        -:  319:        {
        -:  320:            return m_pixbuf.get_height();
        -:  321:        }
        -:  322:
        -:  323:        /**
        -:  324:         * \brief Resizes the image pixel buffer.
        -:  325:         */
function _ZN3png5imageINS_15basic_rgb_pixelIhEENS_12pixel_bufferIS2_EEE6resizeEjj called 1 returned 100% blocks executed 100%
        1:  326:        void resize(uint_32 width, uint_32 height)
        -:  327:        {
        1:  328:            m_pixbuf.resize(width, height);
        1:  328-block  0
call    0 returned 1
        1:  329:            m_info.set_width(width);
call    0 returned 1
        1:  330:            m_info.set_height(height);
call    0 returned 1
        1:  331:        }
        -:  332:
        -:  333:        /**
        -:  334:         * \brief Returns a reference to the row of image data at
        -:  335:         * specified index.
        -:  336:         *
        -:  337:         * \see pixel_buffer::get_row()
        -:  338:         */
        -:  339:        row_access get_row(size_t index)
        -:  340:        {
        -:  341:            return m_pixbuf.get_row(index);
        -:  342:        }
        -:  343:        
        -:  344:        /**
        -:  345:         * \brief Returns a const reference to the row of image data at
        -:  346:         * specified index.
        -:  347:         *
        -:  348:         * \see pixel_buffer::get_row()
        -:  349:         */
        -:  350:        row_const_access get_row(size_t index) const
        -:  351:        {
        -:  352:            return m_pixbuf.get_row(index);
        -:  353:        }
        -:  354:
        -:  355:        /**
        -:  356:         * \brief The non-checking version of get_row() method.
        -:  357:         */
        -:  358:        row_access operator[](size_t index)
        -:  359:        {
        -:  360:            return m_pixbuf[index];
        -:  361:        }
        -:  362:        
        -:  363:        /**
        -:  364:         * \brief The non-checking version of get_row() method.
        -:  365:         */
        -:  366:        row_const_access operator[](size_t index) const
        -:  367:        {
        -:  368:            return m_pixbuf[index];
        -:  369:        }
        -:  370:
        -:  371:        /**
        -:  372:         * \brief Returns a pixel at (x,y) position.
        -:  373:         */
        -:  374:        pixel get_pixel(size_t x, size_t y) const
        -:  375:        {
        -:  376:            return m_pixbuf.get_pixel(x, y);
        -:  377:        }
        -:  378:
        -:  379:        /**
        -:  380:         * \brief Replaces a pixel at (x,y) position.
        -:  381:         */
function _ZN3png5imageINS_15basic_rgb_pixelIhEENS_12pixel_bufferIS2_EEE9set_pixelEmmS2_ called 262144 returned 100% blocks executed 100%
   262144:  382:        void set_pixel(size_t x, size_t y, pixel p)
        -:  383:        {
   262144:  384:            m_pixbuf.set_pixel(x, y, p);
   262144:  384-block  0
call    0 returned 262144
   262144:  385:        }
        -:  386:
        -:  387:        interlace_type get_interlace_type() const
        -:  388:        {
        -:  389:            return m_info.get_interlace_type();
        -:  390:        }
        -:  391:
        -:  392:        void set_interlace_type(interlace_type interlace)
        -:  393:        {
        -:  394:            m_info.set_interlace_type(interlace);
        -:  395:        }
        -:  396:
        -:  397:        compression_type get_compression_type() const
        -:  398:        {
        -:  399:            return m_info.get_compression_type();
        -:  400:        }
        -:  401:
        -:  402:        void set_compression_type(compression_type compression)
        -:  403:        {
        -:  404:            m_info.set_compression_type(compression);
        -:  405:        }
        -:  406:
        -:  407:        filter_type get_filter_type() const
        -:  408:        {
        -:  409:            return m_info.get_filter_type();
        -:  410:        }
        -:  411:
        -:  412:        void set_filter_type(filter_type filter)
        -:  413:        {
        -:  414:            m_info.set_filter_type(filter);
        -:  415:        }
        -:  416:
        -:  417:        /**
        -:  418:         * \brief Returns a reference to the image palette.
        -:  419:         */
        -:  420:        palette& get_palette()
        -:  421:        {
        -:  422:            return m_info.get_palette();
        -:  423:        }
        -:  424:
        -:  425:        /**
        -:  426:         * \brief Returns a const reference to the image palette.
        -:  427:         */
        -:  428:        palette const& get_palette() const
        -:  429:        {
        -:  430:            return m_info.get_palette();
        -:  431:        }
        -:  432:
        -:  433:        /**
        -:  434:         * \brief Replaces the image palette.
        -:  435:         */
        -:  436:        void set_palette(palette const& plte)
        -:  437:        {
        -:  438:            m_info.set_palette(plte);
        -:  439:        }
        -:  440:
        -:  441:        tRNS const& get_tRNS() const
        -:  442:        {
        -:  443:            return m_info.get_tRNS();
        -:  444:        }
        -:  445:
        -:  446:        tRNS& get_tRNS()
        -:  447:        {
        -:  448:            return m_info.get_tRNS();
        -:  449:        }
        -:  450:
        -:  451:        void set_tRNS(tRNS const& trns)
        -:  452:        {
        -:  453:            m_info.set_tRNS(trns);
        -:  454:        }
        -:  455:
        -:  456:        double get_gamma() const
        -:  457:        {
        -:  458:            return m_info.get_gamma();
        -:  459:        }
        -:  460:
        -:  461:        void set_gamma(double gamma)
        -:  462:        {
        -:  463:            m_info.set_gamma(gamma);
        -:  464:        }
        -:  465:
        -:  466:    protected:
        -:  467:        /**
        -:  468:         * \brief A common base class template for pixel_consumer and
        -:  469:         * pixel_generator classes.
        -:  470:         */
        -:  471:        template< typename base_impl >
        -:  472:        class streaming_impl
        -:  473:            : public base_impl
        -:  474:        {
        -:  475:        public:
function _ZN3png5imageINS_15basic_rgb_pixelIhEENS_12pixel_bufferIS2_EEE14streaming_implINS_9generatorIS2_NS5_15pixel_generatorENS_21image_info_ref_holderELb1EEEEC2ERNS_10image_infoERS4_ called 1 returned 100% blocks executed 100%
        1:  476:            streaming_impl(image_info& info, pixbuf& pixels)
        -:  477:                : base_impl(info),
        1:  478:                  m_pixbuf(pixels)
        1:  478-block  0
call    0 returned 1
        -:  479:            {
        1:  480:            }
        -:  481:
        -:  482:            /**
        -:  483:             * \brief Returns the starting address of a \c pos-th row
        -:  484:             * in the image's pixel buffer.
        -:  485:             */
function _ZN3png5imageINS_15basic_rgb_pixelIhEENS_12pixel_bufferIS2_EEE14streaming_implINS_9generatorIS2_NS5_15pixel_generatorENS_21image_info_ref_holderELb1EEEE12get_next_rowEm called 512 returned 100% blocks executed 100%
      512:  486:            byte* get_next_row(size_t pos)
        -:  487:            {
        -:  488:                typedef typename pixbuf::row_traits row_traits;
        -:  489:                return reinterpret_cast< byte* >
      512:  490:                    (row_traits::get_data(m_pixbuf.get_row(pos)));
      512:  490-block  0
call    0 returned 512
call    1 returned 512
        -:  491:            }
        -:  492:
        -:  493:        protected:
        -:  494:            pixbuf& m_pixbuf;
        -:  495:        };
        -:  496:
        -:  497:        /**
        -:  498:         * \brief The pixel buffer adapter for reading pixel data.
        -:  499:         */
        -:  500:        class pixel_consumer
        -:  501:            : public streaming_impl< consumer< pixel,
        -:  502:                                               pixel_consumer,
        -:  503:                                               image_info_ref_holder,
        -:  504:                                               /* interlacing = */ true > >
        -:  505:        {
        -:  506:        public:
        -:  507:            pixel_consumer(image_info& info, pixbuf& pixels)
        -:  508:                : streaming_impl< consumer< pixel,
        -:  509:                                            pixel_consumer,
        -:  510:                                            image_info_ref_holder,
        -:  511:                                            true > >(info, pixels)
        -:  512:            {
        -:  513:            }
        -:  514:
        -:  515:            void reset(size_t pass)
        -:  516:            {
        -:  517:                if (pass == 0)
        -:  518:                {
        -:  519:                    this->m_pixbuf.resize(this->get_info().get_width(),
        -:  520:                                          this->get_info().get_height());
        -:  521:                }
        -:  522:            }
        -:  523:        };
        -:  524:
        -:  525:        /**
        -:  526:         * \brief The pixel buffer adapter for writing pixel data.
        -:  527:         */
        -:  528:        class pixel_generator
        -:  529:            : public streaming_impl< generator< pixel,
        -:  530:                                                pixel_generator,
        -:  531:                                                image_info_ref_holder,
        -:  532:                                                /* interlacing = */ true > >
        -:  533:        {
        -:  534:        public:
function _ZN3png5imageINS_15basic_rgb_pixelIhEENS_12pixel_bufferIS2_EEE15pixel_generatorC2ERNS_10image_infoERS4_ called 1 returned 100% blocks executed 100%
        1:  535:            pixel_generator(image_info& info, pixbuf& pixels)
        -:  536:                : streaming_impl< generator< pixel,
        -:  537:                                             pixel_generator,
        -:  538:                                             image_info_ref_holder,
        1:  539:                                             true > >(info, pixels)
        1:  539-block  0
call    0 returned 1
        -:  540:            {
        1:  541:            }
        -:  542:        };
        -:  543:
        -:  544:        image_info m_info;
        -:  545:        pixbuf m_pixbuf;
        -:  546:    };
        -:  547:
        -:  548:} // namespace png
        -:  549:
        -:  550:#endif // PNGPP_IMAGE_HPP_INCLUDED
