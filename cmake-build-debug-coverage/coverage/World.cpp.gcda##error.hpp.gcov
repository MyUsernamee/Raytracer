        -:    0:Source:/home/dihydromonoxide/vcpkg/installed/x64-linux/include/png++/error.hpp
        -:    0:Graph:/home/dihydromonoxide/CLionProjects/Raytracer/cmake-build-debug-coverage/CMakeFiles/Raytracer.dir/src/World.cpp.gcno
        -:    0:Data:/home/dihydromonoxide/CLionProjects/Raytracer/cmake-build-debug-coverage/CMakeFiles/Raytracer.dir/src/World.cpp.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2: * Copyright (C) 2007,2008   Alex Shulgin
        -:    3: *
        -:    4: * This file is part of png++ the C++ wrapper for libpng.  PNG++ is free
        -:    5: * software; the exact copying conditions are as follows:
        -:    6: *
        -:    7: * Redistribution and use in source and binary forms, with or without
        -:    8: * modification, are permitted provided that the following conditions are met:
        -:    9: *
        -:   10: * 1. Redistributions of source code must retain the above copyright notice,
        -:   11: * this list of conditions and the following disclaimer.
        -:   12: *
        -:   13: * 2. Redistributions in binary form must reproduce the above copyright
        -:   14: * notice, this list of conditions and the following disclaimer in the
        -:   15: * documentation and/or other materials provided with the distribution.
        -:   16: *
        -:   17: * 3. The name of the author may not be used to endorse or promote products
        -:   18: * derived from this software without specific prior written permission.
        -:   19: *
        -:   20: * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
        -:   21: * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
        -:   22: * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
        -:   23: * NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   24: * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
        -:   25: * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
        -:   26: * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
        -:   27: * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
        -:   28: * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
        -:   29: * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   30: */
        -:   31:#ifndef PNGPP_ERROR_HPP_INCLUDED
        -:   32:#define PNGPP_ERROR_HPP_INCLUDED
        -:   33:
        -:   34:/* check if we have strerror_s or strerror_r, prefer the former which is C11 std */
        -:   35:#ifdef __STDC_LIB_EXT1__
        -:   36:#define __STDC_WANT_LIB_EXT1__ 1
        -:   37:#include <string.h>
        -:   38:
        -:   39:#define HAVE_STRERROR_S 1
        -:   40:#else
        -:   41:#undef  HAVE_STRERROR_S
        -:   42:#endif
        -:   43:
        -:   44:#include <string>
        -:   45:#include <stdexcept>
        -:   46:#include <cerrno>
        -:   47:#include <cstdlib>
        -:   48:#include <cstring>
        -:   49:
        -:   50:namespace png
        -:   51:{
        -:   52:
        -:   53:    /**
        -:   54:     * \brief Exception class to represent runtime errors related to
        -:   55:     * png++ operation.
        -:   56:     */
        -:   57:    class error
        -:   58:        : public std::runtime_error
        -:   59:    {
        -:   60:    public:
        -:   61:        /**
        -:   62:         * \param  message  error description
        -:   63:         */
function _ZN3png5errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:   64:        explicit error(std::string const& message)
    #####:   65:            : std::runtime_error(message)
    %%%%%:   65-block  0
call    0 never executed
        -:   66:        {
    #####:   67:        }
        -:   68:    };
        -:   69:
        -:   70:    /**
        -:   71:     * \brief Exception class to represent standard library errors
        -:   72:     * (generally IO).
        -:   73:     *
        -:   74:     * \see  reader, writer
        -:   75:     */
        -:   76:    class std_error
        -:   77:        : public std::runtime_error
        -:   78:    {
        -:   79:    public:
        -:   80:        /**
        -:   81:         * Constructs an std_error object.  The \a message string is
        -:   82:         * appended with <tt>": "</tt> and the error description as
        -:   83:         * returned by \c strerror(\a error).
        -:   84:         *
        -:   85:         * \param  message  error description
        -:   86:         * \param  error    error number
        -:   87:         */
function _ZN3png9std_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi called 0 returned 0% blocks executed 0%
    #####:   88:        explicit std_error(std::string const& message, int errnum = errno)
    #####:   89:            : std::runtime_error((message + ": ") + thread_safe_strerror(errnum))
    %%%%%:   89-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:   89-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:   89-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:   89-block  3
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$:   89-block  4
call   13 never executed
    $$$$$:   89-block  5
    $$$$$:   89-block  6
call   14 never executed
    $$$$$:   89-block  7
    $$$$$:   89-block  8
call   15 never executed
        -:   90:        {
    #####:   91:        }
        -:   92:
        -:   93:    protected:
function _ZN3png9std_error20thread_safe_strerrorB5cxx11Ei called 0 returned 0% blocks executed 0%
    #####:   94:        static std::string thread_safe_strerror(int errnum)
        -:   95:        {
        -:   96:#define ERRBUF_SIZE 512
    #####:   97:            char buf[ERRBUF_SIZE] = { 0 };
        -:   98:
        -:   99:#ifdef HAVE_STRERROR_S
        -:  100:            strerror_s(buf, ERRBUF_SIZE, errnum);
        -:  101:            return std::string(buf);
        -:  102:#else
        -:  103:#if ((_POSIX_C_SOURCE >= 200112L || _XOPEN_SOURCE >= 600) && !_GNU_SOURCE) || (!__GLIBC__)
        -:  104:            strerror_r(errnum, buf, ERRBUF_SIZE);
        -:  105:            return std::string(buf);
        -:  106:#else
        -:  107:            /* GNU variant can return a pointer to static buffer instead of buf */
    #####:  108:            return std::string(strerror_r(errnum, buf, ERRBUF_SIZE));
    %%%%%:  108-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  108-block  1
call    5 never executed
    %%%%%:  108-block  2
    $$$$$:  108-block  3
call    6 never executed
    $$$$$:  108-block  4
        -:  109:#endif
        -:  110:#endif
        -:  111:
        -:  112:#undef ERRBUF_SIZE
        -:  113:        }
        -:  114:    };
        -:  115:
        -:  116:} // namespace png
        -:  117:
        -:  118:#endif // PNGPP_ERROR_HPP_INCLUDED
